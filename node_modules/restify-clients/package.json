{
  "_args": [
    [
      {
        "raw": "restify-clients@^1.4.0",
        "scope": null,
        "escapedName": "restify-clients",
        "name": "restify-clients",
        "rawSpec": "^1.4.0",
        "spec": ">=1.4.0 <2.0.0",
        "type": "range"
      },
      "/Users/lee/Documents/gcrtest/node_modules/docker-registry-client"
    ]
  ],
  "_from": "restify-clients@>=1.4.0 <2.0.0",
  "_id": "restify-clients@1.5.3",
  "_inCache": true,
  "_location": "/restify-clients",
  "_nodeVersion": "4.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/restify-clients_1.5.3_1524256873704_0.8064763303861486"
  },
  "_npmUser": {
    "name": "trentm",
    "email": "trentm@gmail.com"
  },
  "_npmVersion": "2.15.11",
  "_phantomChildren": {},
  "_requested": {
    "raw": "restify-clients@^1.4.0",
    "scope": null,
    "escapedName": "restify-clients",
    "name": "restify-clients",
    "rawSpec": "^1.4.0",
    "spec": ">=1.4.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/docker-registry-client"
  ],
  "_resolved": "https://registry.npmjs.org/restify-clients/-/restify-clients-1.5.3.tgz",
  "_shasum": "90e2c0e68bcaee6c32fdef2105b0641e2152fe0d",
  "_shrinkwrap": null,
  "_spec": "restify-clients@^1.4.0",
  "_where": "/Users/lee/Documents/gcrtest/node_modules/docker-registry-client",
  "author": {
    "name": "Alex Liu",
    "email": "donutespresso@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/restify/clients/issues"
  },
  "contributors": [
    {
      "name": "Alex Liu"
    },
    {
      "name": "Bryan Donovan"
    },
    {
      "name": "Gergely Nemeth"
    },
    {
      "name": "Glenn Murray"
    },
    {
      "name": "Isaac Schlueter"
    },
    {
      "name": "Joshua M. Clulow"
    },
    {
      "name": "Marcello de Sales"
    },
    {
      "name": "Mark Cavage"
    },
    {
      "name": "Micah Ransdell"
    },
    {
      "name": "Mihir Rege"
    },
    {
      "name": "Ray Solomon"
    },
    {
      "name": "Trent Mick"
    },
    {
      "name": "Vladimir Bulyga"
    },
    {
      "name": "Wagner Francisco Mezaroba"
    }
  ],
  "dependencies": {
    "assert-plus": "^1.0.0",
    "backoff": "^2.4.1",
    "bunyan": "^1.8.3",
    "dtrace-provider": "^0.8.3",
    "fast-safe-stringify": "^1.1.3",
    "keep-alive-agent": "0.0.1",
    "lodash": "^4.7.0",
    "lru-cache": "^4.0.1",
    "mime": "^1.3.4",
    "once": "^1.3.2",
    "restify-errors": "^3.1.0",
    "semver": "^5.0.1",
    "tunnel-agent": "^0.6.0",
    "uuid": "^3.0.1"
  },
  "description": "HttpClient, StringClient, and JsonClient extracted from restify",
  "devDependencies": {
    "chai": "^4.0.2",
    "coveralls": "^2.11.4",
    "eslint": "^4.1.1",
    "istanbul": "^0.4.0",
    "jscs": "^3.0.0",
    "json": "^9.0.4",
    "mkdirp": "^0.5.1",
    "mocha": "^3.4.2",
    "nock": "^9.0.13",
    "nsp": "^2.0.1",
    "restify": "^4.3.0"
  },
  "directories": {},
  "dist": {
    "shasum": "90e2c0e68bcaee6c32fdef2105b0641e2152fe0d",
    "tarball": "https://registry.npmjs.org/restify-clients/-/restify-clients-1.5.3.tgz",
    "fileCount": 11,
    "unpackedSize": 68645,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa2lBqCRA9TVsSAnZWagAA7M0QAJ+7w+My3WhK+YRoIwFm\nxAlK78K6qKOsGVTR65GchV2k51+N/kxs6sXFJT4rKRcUzhKKSi7Ca3LTdo43\nkRDDeQOnCvTH82YSYQdoJETAUIQKYEBOFrJtx3R6SiG4WRfJIl0t6MC25DVj\niGyqRgIJ38HtuzemLMiksjMDMIZvpNs/rC3IO1GmBu/SKJ1211sM+X+fdESb\nEYYIy1gdrCy+yKdBlCBFmAyCqYgvDLJZJr/UbMUk+JjBHP+XQTI3yK+7kFkJ\ns+gXubXboCEBAdoYRsytg/HXLyTdM6USgEwuO4mdIk5YTEdR3m/xQ4P5Fvch\nW7eWHvv1C9JG+TK2LHeO1kI72CyDWk1Yiu8HaxvDAParGx2APSTiC8h4Vcxs\n2sIaelckQQdettyKUS8TvxfiZXcaRYQzeCpCucUip8OMMkqhztyYObuNO64P\ncO3LMFFa0MGxOS2x3yFctRKrxIREqx1BDqbbk5lTyXIHiboRziXJIbuUQZnT\n5S+bU7I+/IhcPwGfBq+81pReGMDLETgTgs/ETRkf6LCngQ8KPwIq6n6z0BOR\nHVEmPiXJ3ZLM46aVvslN33rChgR+lOhxD6Mm3o3pVOGLFAisCUuNbZAH3s31\nZ9PxfKy1+yRfKbz2ieDM6lPUfi/S1Dfa1VJagmsQhM19PQlcLfY69Kle3/86\n0pkJ\r\n=nZ52\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "lib"
  ],
  "gitHead": "b7a3dad33c1df2bd27642bf0e87dc2268775525a",
  "homepage": "http://www.restify.com",
  "keywords": [
    "restify",
    "restify-clients",
    "http client",
    "json client",
    "request",
    "superagent"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "donutespresso",
      "email": "donutespresso@gmail.com"
    },
    {
      "name": "micahr",
      "email": "mjr578@gmail.com"
    },
    {
      "name": "retrohacker",
      "email": "william.jblankenship@gmail.com"
    },
    {
      "name": "trentm",
      "email": "trentm@gmail.com"
    },
    {
      "name": "yunong",
      "email": "yjxiao@gmail.com"
    }
  ],
  "name": "restify-clients",
  "optionalDependencies": {
    "dtrace-provider": "^0.8.3"
  },
  "readme": "# restify-clients\n\n[![NPM Version](https://img.shields.io/npm/v/restify-clients.svg)](https://npmjs.org/package/restify-clients)\n[![Build Status](https://travis-ci.org/restify/clients.svg?branch=master)](https://travis-ci.org/restify/clients)\n[![Coverage Status](https://coveralls.io/repos/restify/clients/badge.svg?branch=master)](https://coveralls.io/r/restify/clients?branch=master)\n[![Dependency Status](https://david-dm.org/restify/clients.svg)](https://david-dm.org/restify/clients)\n[![devDependency Status](https://david-dm.org/restify/clients/dev-status.svg)](https://david-dm.org/restify/clients#info=devDependencies)\n[![bitHound Score](https://www.bithound.io/github/restify/clients/badges/score.svg)](https://www.bithound.io/github/restify/clients/master)\n[![NSP Status](https://img.shields.io/badge/NSP%20status-vulnerabilities%20found-red.svg)](https://travis-ci.org/restify/clients)\n\n> HttpClient, StringClient, and JsonClient extracted from restify\n\nThis module contains HTTP clients extracted from restify.\n\n* JsonClient - sends and expects application/json\n* StringClient - sends url-encoded request and expects text/plain\n* HttpClient - thin wrapper over node's http/https libraries\n\nThe idea being that if you want to support \"typical\" control-plane REST APIs, you probably want the JsonClient, or if you're using some other serialization (like XML) you'd write your own client that extends the StringClient. If you need streaming support, you'll need to do some work on top of the HttpClient, as StringClient and friends buffer requests/responses.\n\nAll clients support retry with exponential backoff for getting a TCP connection; they do not perform retries on 5xx error codes like previous versions of the restify client. You can set retry to false to disable this logic altogether. Also, all clients support a connectTimeout field, which is use on each retry. The default is not to set a connectTimeout, so you end up with the node.js socket defaults.\n\n## Getting Started\n\nInstall the module with: `npm install restify-clients`\n\n## Usage\n\n### Client API\n\nThere are actually three separate clients shipped in restify:\n\n* **JsonClient:** sends and expects application/json\n* **StringClient:** sends url-encoded request and expects text/plain\n* **HttpClient:** thin wrapper over node's http/https libraries\n\nThe idea being that if you want to support \"typical\" control-plane\nREST APIs, you probably want the `JsonClient`, or if you're using some\nother serialization (like XML) you'd write your own client that\nextends the `StringClient`. If you need streaming support, you'll need\nto do some work on top of the `HttpClient`, as `StringClient` and\nfriends buffer requests/responses.\n\nAll clients support retry with exponential backoff for getting a TCP\nconnection; they do not perform retries on 5xx error codes like\nprevious versions of the restify client.  You can set `retry` to `false` to\ndisable this logic altogether.  Also, all clients support a `connectTimeout`\nfield, which is use *on each retry*.  The default is not to set a\n`connectTimeout`, so you end up with the node.js socket defaults.\n\nHere's an example of hitting the\n[Joyent CloudAPI](https://api.us-east-1.joyent.com):\n\n```javascript\nvar clients = require('restify-clients');\n\n// Creates a JSON client\nvar client = clients.createJsonClient({\n  url: 'https://us-east-1.api.joyent.com'\n});\n\n\nclient.basicAuth('$login', '$password');\nclient.get('/my/machines', function(err, req, res, obj) {\n  assert.ifError(err);\n\n  console.log(JSON.stringify(obj, null, 2));\n});\n```\n\nAs a short-hand, a client can be initialized with a string-URL rather than\nan options object:\n\n```javascript\nvar clients = require('restify-clients');\n\nvar client = clients.createJsonClient('https://us-east-1.api.joyent.com');\n```\n\nNote that all further documentation refers to the \"short-hand\" form of\nmethods like `get/put/del` which take a string path.  You can also\npass in an object to any of those methods with extra params (notably\nheaders):\n\n```javascript\nvar options = {\n  path: '/foo/bar',\n  headers: {\n    'x-foo': 'bar'\n  },\n  retry: {\n    'retries': 0\n  },\n  agent: false\n};\n\nclient.get(options, function(err, req, res) { .. });\n```\n\nIf you need to interpose additional headers in the request before it is sent on\nto the server, you can provide a synchronous callback function as the\n`signRequest` option when creating a client.  This is particularly useful with\n[node-http-signature](https://github.com/joyent/node-http-signature), which\nneeds to attach a cryptographic signature of selected outgoing headers.  If\nprovided, this callback will be invoked with a single parameter: the outgoing\n`http.ClientRequest` object.\n\n### JsonClient\n\nThe JSON Client is the highest-level client bundled with restify; it\nexports a set of methods that map directly to HTTP verbs.  All\ncallbacks look like `function(err, req, res, [obj])`, where `obj` is\noptional, depending on if content was returned. HTTP status codes are\nnot interpreted, so if the server returned 4xx or something with a\nJSON payload, `obj` will be the JSON payload.  `err` however will be\nset if the server returned a status code >= 400 (it will be one of the\nrestify HTTP errors).  If `obj` looks like a `RestError`:\n\n    {\n      \"code\": \"FooError\",\n      \"message\": \"some foo happened\"\n    }\n\nthen `err` gets \"upconverted\" into a `RestError` for you.  Otherwise\nit will be an `HttpError`.\n\n#### createJsonClient(options)\n\n```javascript\nvar client = restify.createJsonClient({\n  url: 'https://api.us-east-1.joyent.com',\n  version: '*'\n});\n```    \n\n### API Options:\n\n|Name  | Type   | Description |\n| :--- | :----: | :---- |\n|accept|String|Accept header to send|\n|audit|Boolean|Enable Audit logging|\n|auditor|Function|Function for Audit logging|\n|connectTimeout|Number|Amount of time to wait for a socket|\n|requestTimeout|Number|Amount of time to wait for the request to finish|\n|dtrace|Object|node-dtrace-provider handle|\n|gzip|Object|Will compress data when sent using `content-encoding: gzip`|\n|headers|Object|HTTP headers to set in all requests|\n|log|Object|[bunyan](https://github.com/trentm/node-bunyan) instance|\n|retry|Object|options to provide to node-retry;\"false\" disables retry; defaults to 4 retries|\n|safeStringify|Boolean|Safely serialize JSON objects, i.e. circular dependencies|\n|signRequest|Function|synchronous callback for interposing headers before request is sent|\n|url|String|Fully-qualified URL to connect to|\n|userAgent|String|user-agent string to use; restify inserts one, but you can override it|\n|version|String|semver string to set the accept-version|\n|followRedirects|Boolean|Follow redirects from server|\n|maxRedirects|Number|Maximum number of redirects to follow|\n|proxy|String|An HTTP proxy URL string (or parsed URL object) to use for requests. If not specified, then the `https_proxy` or `http_proxy` environment variables are used. Pass `proxy: false` to explicitly disable using a proxy (i.e. to ensure a proxy URL is not picked up from environment variables). See the [Proxy](#proxy) section below.|\n|noProxy|String|A comma-separated list of hosts for which to not use a proxy. If not specified, then then `NO_PROXY` environment variable is used. One can pass `noProxy: ''` to explicitly set this empty and ensure a possible environment variable is not used. See the [Proxy](#proxy) section below.|\n\n\n#### get(path, callback)\n\nPerforms an HTTP get; if no payload was returned, `obj` defaults to\n`{}` for you (so you don't get a bunch of null pointer errors).\n\n```javascript\nclient.get('/foo/bar', function(err, req, res, obj) {\n  assert.ifError(err);\n  console.log('%j', obj);\n});\n```\n\n#### head(path, callback)\n\nJust like `get`, but without `obj`:\n\n```javascript\nclient.head('/foo/bar', function(err, req, res) {\n  assert.ifError(err);\n  console.log('%d -> %j', res.statusCode, res.headers);\n});\n```\n\n#### post(path, object, callback)\n\nTakes a complete object to serialize and send to the server.\n\n```javascript\nclient.post('/foo', { hello: 'world' }, function(err, req, res, obj) {\n  assert.ifError(err);\n  console.log('%d -> %j', res.statusCode, res.headers);\n  console.log('%j', obj);\n});\n```\n\n#### put(path, object, callback)\n\nJust like `post`:\n\n```javascript\nclient.put('/foo', { hello: 'world' }, function(err, req, res, obj) {\n  assert.ifError(err);\n  console.log('%d -> %j', res.statusCode, res.headers);\n  console.log('%j', obj);\n});\n```\n\n#### del(path, callback)\n\n`del` doesn't take content, since you know, it should't:\n\n```javascript\nclient.del('/foo/bar', function(err, req, res) {\n  assert.ifError(err);\n  console.log('%d -> %j', res.statusCode, res.headers);\n});\n```\n\n### StringClient\n\n`StringClient` is what `JsonClient` is built on, and provides a base\nfor you to write other buffering/parsing clients (like say an XML\nclient). If you need to talk to some \"raw\" HTTP server, then\n`StringClient` is what you want, as it by default will provide you\nwith content uploads in `application/x-www-form-url-encoded` and\ndownloads as `text/plain`.  To extend a `StringClient`, take a look at\nthe source for `JsonClient`. Effectively, you extend it, and set the\nappropriate options in the constructor and implement a `write` (for\nput/post) and `parse` method (for all HTTP bodies), and that's it.\n\n#### createStringClient(options)\n\n```javascript\nvar client = restify.createStringClient({\n  url: 'https://example.com'\n});\n```\n\n#### get(path, callback)\n\nPerforms an HTTP get; if no payload was returned, `data` defaults to\n`''` for you (so you don't get a bunch of null pointer errors).\n\n```javascript\nclient.get('/foo/bar', function(err, req, res, data) {\n  assert.ifError(err);\n  console.log('%s', data);\n});\n```\n\n#### head(path, callback)\n\nJust like `get`, but without `data`:\n\n```javascript\nclient.head('/foo/bar', function(err, req, res) {\n  assert.ifError(err);\n  console.log('%d -> %j', res.statusCode, res.headers);\n});\n```\n\n#### post(path, object, callback)\n\nTakes a complete object to serialize and send to the server.\n\n```javascript\nclient.post('/foo', { hello: 'world' }, function(err, req, res, data) {\n  assert.ifError(err);\n  console.log('%d -> %j', res.statusCode, res.headers);\n  console.log('%s', data);\n});\n```\n\n#### put(path, object, callback)\n\nJust like `post`:\n\n```javascript\nclient.put('/foo', { hello: 'world' }, function(err, req, res, data) {\n  assert.ifError(err);\n  console.log('%d -> %j', res.statusCode, res.headers);\n  console.log('%s', data);\n});\n```\n\n#### del(path, callback)\n\n`del` doesn't take content, since you know, it should't:\n\n```javascript\nclient.del('/foo/bar', function(err, req, res) {\n  assert.ifError(err);\n  console.log('%d -> %j', res.statusCode, res.headers);\n});\n```\n\n### HttpClient\n\n`HttpClient` is the lowest-level client shipped in restify, and is\nbasically just some sugar over the top of node's http/https modules\n(with HTTP methods like the other clients).  It is useful if you want\nto stream with restify.  Note that the event below is unfortunately\nnamed `result` and not `response` (because\n[Event 'response'](http://nodejs.org/docs/latest/api/all.html#event_response_)\nis already used).\n\n```javascript\nclient = restify.createClient({\n  url: 'http://127.0.0.1'\n});\n\nclient.get('/str/mcavage', function(err, req) {\n  assert.ifError(err); // connection error\n\n  req.on('result', function(err, res) {\n    assert.ifError(err); // HTTP status code >= 400\n\n    res.body = '';\n    res.setEncoding('utf8');\n    res.on('data', function(chunk) {\n      res.body += chunk;\n    });\n\n    res.on('end', function() {\n      console.log(res.body);\n    });\n  });\n});\n```\n\nOr a write:\n\n```javascript\nclient.post(opts, function(err, req) {\n  assert.ifError(connectErr);\n\n  req.on('result', function(err, res) {\n    assert.ifError(err);\n    res.body = '';\n    res.setEncoding('utf8');\n    res.on('data', function(chunk) {\n      res.body += chunk;\n    });\n\n    res.on('end', function() {\n      console.log(res.body);\n    });\n  });\n\n  req.write('hello world');\n  req.end();\n});\n```\n\nNote that get/head/del all call `req.end()` for you, so you can't\nwrite data over those. Otherwise, all the same methods exist as\n`JsonClient/StringClient`.\n\nOne wishing to extend the `HttpClient` should look at the internals\nand note that `read` and `write` probably need to be overridden.\n\n#### Proxy\n\nA restify client can use an HTTP proxy, either via options to `createClient`\nor via the `http_proxy`, `https_proxy`, and `NO_PROXY` environment variables\ncommon in many tools (e.g., `curl`).\n\n```javascript\nrestify.createClient({\n  proxy: <proxy url string or object>,\n  noProxy: <boolean>\n});\n```\n\nThe `proxy` option to `createClient` specifies the proxy URL, for example:\n\n```javascript\nproxy: 'http://user:password@example.com:4321'\n```\n\nOr a proxy object can be given. (Warning: the `proxyAuth` field is not what\na simple `require('url').parse()` will produce if your proxy URL has auth\ninfo.)\n\n```javascript\nproxy: {\n  protocol: 'http:',\n  host: 'example.com',\n  port: 4321,\n  proxyAuth: 'user:password'\n}\n```\n\nOr `proxy: false` can be given to explicitly disable using a proxy -- i.e. to\nensure a proxy URL is not picked up from environment variables.\n\nIf not specified, then the following environment variables (in the given order)\nare used to pick up a proxy URL:\n\n    HTTPS_PROXY\n    https_proxy\n    HTTP_PROXY\n    http_proxy\n\nNote: A future major version of restify(-clients) might change this environment\nvariable behaviour. See the discussion on [this issue](https://github.com/restify/node-restify/issues/878#issuecomment-249673285).\n\n\nThe `noProxy` option can be used to exclude some hosts from using a given\nproxy. If it is not specified, then the `NO_PROXY` or `no_proxy` environment\nvariable is used. Use `noProxy: ''` to override a possible environment variable,\nbut not match any hosts.\n\nThe value is a string giving a comma-separated set of host, host-part suffix, or\nthe special '*' to indicate all hosts. (Its definition is intended to match\ncurl's `NO_PROXY` environment variable.) Some examples:\n\n\n    $ export NO_PROXY='*'               # don't proxy requests to any urls\n    $ export NO_PROXY='127.0.0.1'       # don't proxy requests the localhost IP\n    $ export NO_PROXY='localhost:8000'  # ... 'localhost' hostname and port 8000\n    $ export NO_PROXY='google.com'      # ... \"google.com\" and \"*.google.com\"\n    $ export NO_PROXY='www.google.com'  # ... \"www.google.com\"\n    $ export NO_PROXY='127.0.0.1, google.com'   # multiple hosts\n\n**Note**: The url being requested must match the full hostname or hostname\npart to a '.': `NO_PROXY=oogle.com` does not match \"google.com\". DNS lookups are\nnot performed to determine the IP address of a hostname.\n\n\n#### basicAuth(username, password)\n\nSince it hasn't been mentioned yet, this convenience method (available\non all clients), just sets the `Authorization` header for all HTTP requests:\n\n```javascript\nclient.basicAuth('mark', 'mysupersecretpassword');\n```\n\n#### Upgrades\n\nIf you successfully negotiate an Upgrade with the HTTP server, an\n`upgradeResult` event will be emitted with the arguments `err`, `res`, `socket`\nand `head`.  You can use this functionality to establish a WebSockets\nconnection with a server.  For example, using the\n[watershed](https://github.com/jclulow/node-watershed) library:\n\n```javascript\nvar ws = new Watershed();\nvar wskey = ws.generateKey();\nvar options = {\n  path: '/websockets/attach',\n  headers: {\n    connection: 'upgrade',\n    upgrade: 'websocket',\n    'sec-websocket-key': wskey,\n  }\n};\nclient.get(options, function(err, res, socket, head) {\n  res.once('upgradeResult', function(err2, res2, socket2, head2) {\n    var shed = ws.connect(res2, socket2, head2, wskey);\n    shed.on('text', function(msg) {\n      console.log('message from server: ' + msg);\n      shed.end();\n    });\n    shed.send('greetings program');\n  });\n});\n```\n\n\n## Contributing\n\nAdd unit tests for any new or changed functionality. Ensure that lint and style\nchecks pass.\n\nTo start contributing, install the git pre-push hooks:\n\n```sh\nmake githooks\n```\n\nBefore committing, run the prepush hook:\n\n```sh\nmake prepush\n```\n\nIf you have style errors, you can auto fix whitespace issues by running:\n\n```sh\nmake codestyle-fix\n```\n\n## License\n\nCopyright (c) 2015 Alex Liu\n\nLicensed under the MIT license.\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/restify/clients.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "1.5.3"
}
